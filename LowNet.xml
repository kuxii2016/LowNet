<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LowNet</name>
    </assembly>
    <members>
        <member name="T:LowNet.Data.Logmessage">
            <summary>
            Server Loggingtype Message
            </summary>
        </member>
        <member name="F:LowNet.Data.Logmessage.Debug">
            <summary>
            Debug Message
            </summary>
        </member>
        <member name="F:LowNet.Data.Logmessage.Log">
            <summary>
            Log Message
            </summary>
        </member>
        <member name="F:LowNet.Data.Logmessage.Warning">
            <summary>
            Warning Message
            </summary>
        </member>
        <member name="F:LowNet.Data.Logmessage.Error">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="T:LowNet.Data.Logsettings">
            <summary>
            Server Logsettings
            </summary>
        </member>
        <member name="F:LowNet.Data.Logsettings.Logging_None">
            <summary>
            No Log
            </summary>
        </member>
        <member name="F:LowNet.Data.Logsettings.Logging_Warning">
            <summary>
            Only Warnings
            </summary>
        </member>
        <member name="F:LowNet.Data.Logsettings.Logging_Error">
            <summary>
            Only Errors
            </summary>
        </member>
        <member name="F:LowNet.Data.Logsettings.Logging_Normal">
            <summary>
            Normal Logging Info,Warning,Error
            </summary>
        </member>
        <member name="F:LowNet.Data.Logsettings.Logging_Debug">
            <summary>
            Only Debug Logging Loggt Info,Warnin,Error,Debug
            </summary>
        </member>
        <member name="T:LowNet.Data.Store">
            <summary>
            Store is the Packet,
            Read Data from here.
            Or Add Data to Store and Send it
            </summary>
        </member>
        <member name="M:LowNet.Data.Store.#ctor">
            <summary>
            Create empty Store
            </summary>
        </member>
        <member name="M:LowNet.Data.Store.#ctor(LowNet.Packets.LowNetpacketOrder)">
            <summary>
            Create Store with Packetenum
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LowNet.Data.Store.#ctor(System.Int32)">
            <summary>
            Create Store with Id
            </summary>
            <param name="_id"></param>
        </member>
        <member name="M:LowNet.Data.Store.#ctor(System.Byte[])">
            <summary>
            Create store from Byte Array
            </summary>
            <param name="_data"></param>
        </member>
        <member name="M:LowNet.Data.Store.SetBytes(System.Byte[])">
            <summary>
            Set Store Bytes
            </summary>
            <param name="_data"></param>
        </member>
        <member name="M:LowNet.Data.Store.WriteLength">
            <summary>
            Write Packet Store Lenght
            </summary>
        </member>
        <member name="M:LowNet.Data.Store.InsertInt(System.Int32)">
            <summary>
            Insert int on First from Store
            </summary>
            <param name="_value"></param>
        </member>
        <member name="P:LowNet.Data.Store.ToArray">
            <summary>
            Get Store as ByteArray
            </summary>
        </member>
        <member name="P:LowNet.Data.Store.Length">
            <summary>
            Get the Lenght of the Store
            </summary>
        </member>
        <member name="P:LowNet.Data.Store.UnreadLength">
            <summary>
            Get the Unread Lenght of the Store
            </summary>
        </member>
        <member name="M:LowNet.Data.Store.Reset(System.Boolean)">
            <summary>
            Reset Store
            </summary>
            <param name="_shouldReset"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushByte(System.Byte)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushBytes(System.Byte[])">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushShort(System.Int16)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushInt(System.Int32)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushLong(System.Int64)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushDouble(System.Double)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushFloat(System.Single)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushBool(System.Boolean)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushAscii(System.String)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushVector3(UnityEngine.Vector3)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushVector2(UnityEngine.Vector2)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushQuaternion(UnityEngine.Quaternion)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushColor(UnityEngine.Color)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushColor32(UnityEngine.Color32)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PushObject(System.Object)">
            <summary>
            Add data to the package
            </summary>
            <param name="_value"></param>
        </member>
        <member name="M:LowNet.Data.Store.PopByte(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopBytes(System.Int32,System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_length"></param>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopShort(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopInt(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopLong(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopDouble(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopFloat(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopBool(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopAscii(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopVector3(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopVector2(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopQuaternion(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopColor(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopColor32(System.Boolean)">
            <summary>
            Read data from packet
            </summary>
            <param name="_moveReadPos"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.PopObject(System.Type)">
            <summary>
            Read data from packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.Dispose(System.Boolean)">
            <summary>
            Dispose Store
            </summary>
            <param name="_disposing"></param>
        </member>
        <member name="M:LowNet.Data.Store.Dispose">
            <summary>
            Sispose Store
            </summary>
        </member>
        <member name="M:LowNet.Data.Store.RawDeserializeEx(System.Byte[],System.Type)">
            <summary>
            Object Serializer
            </summary>
            <param name="rawdatas"></param>
            <param name="anytype"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Data.Store.RawSerializeEx(System.Object)">
            <summary>
            Object Serializer
            </summary>
            <param name="anything"></param>
            <returns></returns>
        </member>
        <member name="T:LowNet.Packets.LowNetpacketOrder">
            <summary>
            Lownet Packet Order
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_CONNECT">
            <summary>
            On Client Connect
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_HANDSHAKE">
            <summary>
            Handshake with Server
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_DATA">
            <summary>
            Lownet Data
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_PLAYER">
            <summary>
            Used for Player Spawning
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_OBJECT">
            <summary>
            Used for Objects Spawning
            </summary>
        </member>
        <member name="F:LowNet.Packets.LowNetpacketOrder.LOWNET_CONNECT_UDP">
            <summary>
            Connects Player UDP Layer
            </summary>
        </member>
        <member name="T:LowNet.Events.ClientConnectedEventArgs">
            <summary>
            Connection Event
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientConnectedEventArgs.client">
            <summary>
            Client was triggert this
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientConnectedEventArgs.session">
            <summary>
            Session from Client
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientConnectedEventArgs.Connected">
            <summary>
            Fire Time
            </summary>
        </member>
        <member name="T:LowNet.Events.ClientDisconnectedEventArgs">
            <summary>
            Client Connection Event
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientDisconnectedEventArgs.client">
            <summary>
            Client was triggert this Event
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientDisconnectedEventArgs.session">
            <summary>
            Session from Client
            </summary>
        </member>
        <member name="F:LowNet.Events.ClientDisconnectedEventArgs.Connected">
            <summary>
            Fire Time
            </summary>
        </member>
        <member name="T:LowNet.Events.ServerlogMessage">
            <summary>
            Server Logmessage Event
            </summary>
        </member>
        <member name="F:LowNet.Events.ServerlogMessage.LogType">
            <summary>
            Logtype of Message
            </summary>
        </member>
        <member name="F:LowNet.Events.ServerlogMessage.LogMessage">
            <summary>
            Log Message
            </summary>
        </member>
        <member name="F:LowNet.Events.ServerlogMessage.TimeStamp">
            <summary>
            Fire Time
            </summary>
        </member>
        <member name="T:LowNet.Gameclient.GameClient">
            <summary>
            Player Client
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.#ctor(LowNet.Data.Logsettings)">
            <summary>
            Create new Player Client
            </summary>
            <param name="log"></param>
        </member>
        <member name="E:LowNet.Gameclient.GameClient.OnClientog">
            <summary>
            Event Handler will Raisei on new Server Log
            </summary>
        </member>
        <member name="P:LowNet.Gameclient.GameClient.Instance">
            <summary>
            Gameclient Instance
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.UDP">
            <summary>
            Client UDP Layer
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.TCP">
            <summary>
            Client TCP Layer
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.discoveryLayer">
            <summary>
            Client Discoverlayer
            </summary>
        </member>
        <member name="T:LowNet.Gameclient.GameClient.PacketHandler">
            <summary>
            Call Packet Reader
            </summary>
            <param name="client">Sender Client</param>
            <param name="store">Sender Store</param>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.ClientPackets">
            <summary>
            Do not Override the Handler, Or Lownet Components will not work without Create same Packets!
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.Logging">
            <summary>
            Client Log Settings
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.PlayerId">
            <summary>
            Internal ClientId
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.isConnected">
            <summary>
            Is Client Connected or Not
            </summary>
        </member>
        <member name="F:LowNet.Gameclient.GameClient.Timeout">
            <summary>
            Time Out 
            </summary>
        </member>
        <member name="P:LowNet.Gameclient.GameClient.GetConnectionId">
            <summary>
            Get Client Connection/Player Id
            </summary>
        </member>
        <member name="P:LowNet.Gameclient.GameClient.Serverpassword">
            <summary>
            Server Password
            </summary>
        </member>
        <member name="P:LowNet.Gameclient.GameClient.TempUUID">
            <summary>
            TempUUID renew on new Connection
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Disconnect">
            <summary>
            Disconnect from Server
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Connect(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Connect to Server
            </summary>
            <param name="ServerIp"></param>
            <param name="Serverport"></param>
            <param name="serverpasswd"></param>
            <param name="clienttimeout"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.ConnectUDP">
            <summary>
            Connect UDP Layer
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.SendTCP(LowNet.Data.Store)">
            <summary>
            Send Data to Server via TCP
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.SendUDP(LowNet.Data.Store)">
            <summary>
            Send Data to Server via UDP
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.SetplayerId(System.Int32)">
            <summary>
            Overwrite Current ConnectionId
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.StopListner">
            <summary>
            Stop Listner on Application Close
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Log(System.String,System.Object)">
            <summary>
            Print Logmessage
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Error(System.String,System.Object)">
            <summary>
            Print Errormessage
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Warning(System.String,System.Object)">
            <summary>
            Print Warning Message
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Gameclient.GameClient.Debug(System.String,System.Object)">
            <summary>
            Print Debug Message
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="T:LowNet.Gameclient.Packets.LOWNET_CONNECT">
            <summary>
            LowNet Connect Packets
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Packets.LOWNET_CONNECT.Read(LowNet.Gameclient.GameClient,LowNet.Data.Store)">
            <summary>
            Read Connection Packet
            </summary>
            <param name="session"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Gameclient.Packets.LOWNET_CONNECT.Send(LowNet.Gameclient.GameClient)">
            <summary>
            Send Response
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:LowNet.Gameclient.Packets.LOWNET_DATA">
            <summary>
            DataQuerry Maybe an tiny Store about Player Data or so?
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Packets.LOWNET_DATA.Read(LowNet.Gameclient.GameClient,LowNet.Data.Store)">
            <summary>
            Read Packet
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Gameclient.Packets.LOWNET_DATA.Send(LowNet.Gameclient.GameClient)">
            <summary>
            Send Data 
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:LowNet.Gameclient.Transport.DiscoveryLayer">
            <summary>
            Network Discovery Worker
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Transport.DiscoveryLayer.#ctor(LowNet.Gameclient.GameClient)">
            <summary>
            Init
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:LowNet.Gameclient.Transport.DiscoveryLayer.StartDiscovery">
            <summary>
            Start Worker
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Transport.DiscoveryLayer.Shutdown">
            <summary>
            Stop Discovery Layer
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Transport.DiscoveryLayer.ParseDiscoveryServer(System.String,System.String)">
            <summary>
            Parse Server data
            </summary>
            <param name="message"></param>
            <param name="serverip"></param>
        </member>
        <member name="T:LowNet.Gameclient.Transport.TCPLayer">
            <summary>
            Game Client TCP Layer
            </summary>
        </member>
        <member name="M:LowNet.Gameclient.Transport.TCPLayer.#ctor(LowNet.Gameclient.GameClient)">
            <summary>
            Create new TCP Layer instance
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:LowNet.Gameclient.Transport.UDPLayer.Shutdown">
            <summary>
            Stop Discovery Layer
            </summary>
        </member>
        <member name="T:LowNet.ClientPackets.LowNetClientPackethandler">
            <summary>
            LowNet Client Packet Handler
            </summary>
        </member>
        <member name="M:LowNet.ClientPackets.LowNetClientPackethandler.InitPackets(LowNet.Gameclient.GameClient)">
            <summary>
            Init System Packets
            </summary>
        </member>
        <member name="M:LowNet.ClientPackets.LowNetClientPackethandler.AddPackets(System.Int32,LowNet.Gameclient.GameClient.PacketHandler,System.String)">
            <summary>
            Inject Custom Network Packets info Server
            Its Allow to Use Own Network Packets without Overwriting System Packets.
            When you Overwrite System Packets so you can not use Unity3d LowNet Components.
            </summary>
            <param name="packetId">Packet Id</param>
            <param name="packet">Packet relay Sender Function</param>
            <param name="Customenum">Optional, for Debugging, Custom Name from Enum or was you Want</param>
        </member>
        <member name="M:LowNet.ClientPackets.LowNetClientPackethandler.WriteallPackets">
            <summary>
            Only for Debugging intressting.
            This Function Prints all Server Network Packets
            Contains System Packets plus Custom Packets was are Injected.
            </summary>
        </member>
        <member name="T:LowNet.Server.LowNetServer">
            <summary>
            LowNet Server (Easy Unity3d Networking System)
            </summary>
        </member>
        <member name="M:LowNet.Server.LowNetServer.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,LowNet.Data.Logsettings)">
            <summary>
            Create new Server Instance
            </summary>
            <param name="servername">Server Name from Server for Serverlist or Whatever</param>
            <param name="serverpassword">Server Passwort to block Public Player was have not the Password</param>
            <param name="serverport">Server Listen port</param>
            <param name="maxplayer">Max Amount of Player was can hold the Server</param>
            <param name="isUnity">Is a Unity3d Server or not, Important for Packet Sending/Reading</param>
            <param name="logsettings">Logmode Settings</param>
        </member>
        <member name="F:LowNet.Server.LowNetServer.Player">
            <summary>
            Playerstore Instance
            </summary>
        </member>
        <member name="E:LowNet.Server.LowNetServer.ClientConnected">
            <summary>
            Event Handler will Raise on new Player Connection
            </summary>
        </member>
        <member name="E:LowNet.Server.LowNetServer.ClientDisconnected">
            <summary>
            Event Handler will Raise on Player Disconnect
            </summary>
        </member>
        <member name="E:LowNet.Server.LowNetServer.OnServerlog">
            <summary>
            Event Handler will Raisei on new Server Log
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.GetServerport">
            <summary>
            Get Server Listen Port
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.GetMaxplayer">
            <summary>
            Get Maximal Player Slots
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.GetPlayer">
            <summary>
            Get Current Connected Player
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.GetServername">
            <summary>
            Get Servername
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.GetServerpassword">
            <summary>
            Get Serverpassword
            </summary>
        </member>
        <member name="T:LowNet.Server.LowNetServer.PacketHandler">
            <summary>
            Call Packet Reader
            </summary>
            <param name="client">Sender Client</param>
            <param name="store">Sender Store</param>
        </member>
        <member name="F:LowNet.Server.LowNetServer.Serverpackets">
            <summary>
            Do not Override the Handler, Or Lownet Components will not work without Create same Packets!
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.UDPLayer">
            <summary>
            Get UDP Transport Layer
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.TCPLayer">
            <summary>
            Get TCP Transport Layer
            </summary>
        </member>
        <member name="P:LowNet.Server.LowNetServer.DiscoveryLayer">
            <summary>
            Get Discovery Transport Layer
            </summary>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Start">
            <summary>
            Start Networking Server
            </summary>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Stop">
            <summary>
            Stop Networking Server
            </summary>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Log(System.String,System.Object)">
            <summary>
            Print Logmessage
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Error(System.String,System.Object)">
            <summary>
            Print Errormessage
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Warning(System.String,System.Object)">
            <summary>
            Print Warning Message
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Server.LowNetServer.Debug(System.String,System.Object)">
            <summary>
            Print Debug Message
            </summary>
            <param name="Message"></param>
            <param name="scriptclass"></param>
        </member>
        <member name="M:LowNet.Server.LowNetServer.InvokePlayerconnect(LowNet.Server.Data.Client)">
            <summary>
            Trigger Connect Event
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:LowNet.Server.LowNetServer.InvokePlayerDisconnect(LowNet.Server.Data.Client)">
            <summary>
            Trigger Disconnect Event
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:LowNet.Server.Data.Client">
            <summary>
            LowNet Client.
            Contains the Import Vales, and Infos.
            Session is Attached when client is Connected.
            Contains Connecting Time, Last Packet, PlayerId and More
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Client.ClientId">
            <summary>
            Get ConnectionId
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Client.Session">
            <summary>
            Get Client Session
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Client.#ctor(System.Int32,LowNet.Server.LowNetServer)">
            <summary>
            Create new Playerslot
            </summary>
            <param name="clientId"></param>
            <param name="server"></param>
        </member>
        <member name="T:LowNet.Server.Data.Client.TCP">
            <summary>
            Client TCP Layer
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Client.TCP.Socket">
            <summary>
            Client public Socket
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Client.TCP.#ctor(System.Int32,LowNet.Server.Data.Client)">
            <summary>
            Create new TCP Layer
            </summary>
            <param name="_id"></param>
            <param name="newclient"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.TCP.Connect(System.Net.Sockets.TcpClient)">
            <summary>
            Connect to Client
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.TCP.SendData(LowNet.Data.Store)">
            <summary>
            Send Data to Socket
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.TCP.Disconnect">
            <summary>
            Disconnect Socket
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Client.TCP.Sendresponse">
            <summary>
            Send Connect Response
            </summary>
        </member>
        <member name="T:LowNet.Server.Data.Client.UDP">
            <summary>
            Client UDP Layer
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Client.UDP.EndPoint">
            <summary>
            Client public Endpoint
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Client.UDP.#ctor(System.Int32,LowNet.Server.Data.Client)">
            <summary>
            Create new UDP Layer
            </summary>
            <param name="id"></param>
            <param name="newclient"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.UDP.Connect(System.Net.IPEndPoint)">
            <summary>
            Connect UDP Socket
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.UDP.SendData(LowNet.Data.Store)">
            <summary>
            Send Data
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.UDP.HandleData(LowNet.Data.Store)">
            <summary>
            Handle Client Data
            </summary>
            <param name="packetData"></param>
        </member>
        <member name="M:LowNet.Server.Data.Client.UDP.Disconnect">
            <summary>
            Disconnect UDP Socket
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Client.Disconnect">
            <summary>
            Disconnect Client from Server
            </summary>
        </member>
        <member name="T:LowNet.Server.Data.Session">
            <summary>
            Minimal Player Session
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Session.#ctor(System.Int32,LowNet.Server.LowNetServer)">
            <summary>
            Create new Playersession
            </summary>
            <param name="Id"></param>
            <param name="server"></param>
        </member>
        <member name="F:LowNet.Server.Data.Session.MainServer">
            <summary>
            Main Server only for Logging Important
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.ConnectionId">
            <summary>
            Connection or Player Id
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.GUID">
            <summary>
            Temp. Network UUID
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.Playername">
            <summary>
            Playername
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.Connected">
            <summary>
            Connected Timestamp
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.Lastpacket">
            <summary>
            Last Packet Timestamp
            </summary>
        </member>
        <member name="F:LowNet.Server.Data.Session.MyPrefab">
            <summary>
            Playerprefab
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetConnectionId">
            <summary>
            Get ConnectionId
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetUUID">
            <summary>
            Get Client UUID
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetPlayername">
            <summary>
            Get Local Playername
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.SetPlayername">
            <summary>
            Set Localplayername
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetConnectedTime">
            <summary>
            Get Connection Timestamp
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetLastpacketTime">
            <summary>
            Get Lastpacket Timestamp
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.GetPrefab">
            <summary>
            Get Localprefab
            </summary>
        </member>
        <member name="P:LowNet.Server.Data.Session.SetPrefab">
            <summary>
            Set Localprefab
            </summary>
        </member>
        <member name="M:LowNet.Server.Data.Session.Writeplayer(LowNet.Data.Store)">
            <summary>
            Add Position of my Prefab to Store
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Server.Data.Session.ReadPos(LowNet.Data.Store)">
            <summary>
            Set Pos of my Prefab from Store
            </summary>
            <param name="store"></param>
        </member>
        <member name="T:LowNet.Server.Packets.LOWNET_CONNECT">
            <summary>
            On client Connect Packet
            </summary>
        </member>
        <member name="M:LowNet.Server.Packets.LOWNET_CONNECT.Send">
            <summary>
            Send Packet
            </summary>
        </member>
        <member name="M:LowNet.Server.Packets.LOWNET_CONNECT.Read(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Read Packet
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="T:LowNet.Server.Packets.LOWNET_DATA">
            <summary>
            DataQuerry Maybe an tiny Store about Player Data or so?
            </summary>
        </member>
        <member name="M:LowNet.Server.Packets.LOWNET_DATA.Read(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Read Packet
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Server.Packets.LOWNET_DATA.Send(LowNet.Server.Data.Client)">
            <summary>
            Send Data 
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:LowNet.ServerPackets.LowNetServerPackethander">
            <summary>
            LowNet Message/Packet Handler
            </summary>
        </member>
        <member name="M:LowNet.ServerPackets.LowNetServerPackethander.InitPackets">
            <summary>
            Init Networking System Packets
            </summary>
        </member>
        <member name="M:LowNet.ServerPackets.LowNetServerPackethander.AddCustomPackets(System.Int32,LowNet.Server.LowNetServer.PacketHandler,System.String)">
            <summary>
            Inject Custom Network Packets info Server
            Its Allow to Use Own Network Packets without Overwriting System Packets.
            When you Overwrite System Packets so you can not use Unity3d LowNet Components.
            </summary>
            <param name="packetId">Packet Id</param>
            <param name="packet">Packet relay Sender Function</param>
            <param name="Customenum">Optional, for Debugging, Custom Name from Enum or was you Want</param>
        </member>
        <member name="M:LowNet.ServerPackets.LowNetServerPackethander.WriteallPackets">
            <summary>
            Only for Debugging intressting.
            This Function Prints all Server Network Packets
            Contains System Packets plus Custom Packets was are Injected.
            </summary>
        </member>
        <member name="T:LowNet.Serverstore.Playerstore">
            <summary>
            Player Store hold All Current Playerslots
            </summary>
        </member>
        <member name="M:LowNet.Serverstore.Playerstore.#ctor(LowNet.Server.LowNetServer)">
            <summary>
            Create new Playerstore Instance
            </summary>
            <param name="server">Main Server only for Logging</param>
        </member>
        <member name="F:LowNet.Serverstore.Playerstore.Instance">
            <summary>
            Get Playerstore instance
            </summary>
        </member>
        <member name="F:LowNet.Serverstore.Playerstore.Clients">
            <summary>
            Client Slots, Holds All Slots If Empty or not.!
            </summary>
        </member>
        <member name="M:LowNet.Serverstore.Playerstore.GetPlayer">
            <summary>
            Get Store Playercount
            </summary>
            <returns></returns>
        </member>
        <member name="T:LowNet.Transport.DiscoveryLayer">
            <summary>
            Network Discovery Servise
            </summary>
        </member>
        <member name="M:LowNet.Transport.DiscoveryLayer.#ctor(System.Int32,LowNet.Server.LowNetServer)">
            <summary>
            Create new Service
            </summary>
            <param name="port"></param>
            <param name="server"></param>
        </member>
        <member name="P:LowNet.Transport.DiscoveryLayer.IsRunning">
            <summary>
            Is Service Running or not
            </summary>
        </member>
        <member name="P:LowNet.Transport.DiscoveryLayer.Port">
            <summary>
            Service Listen Port
            </summary>
        </member>
        <member name="M:LowNet.Transport.DiscoveryLayer.Send(System.String,System.Net.IPEndPoint)">
            <summary>
            Send Response to Client
            </summary>
            <param name="Message"></param>
            <param name="Client"></param>
        </member>
        <member name="M:LowNet.Transport.DiscoveryLayer.Shutdown">
            <summary>
            Stop Discovery Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.DiscoveryLayer.Start">
            <summary>
            Start Discovery Layer
            </summary>
        </member>
        <member name="T:LowNet.Transport.TCPLayer">
            <summary>
            TCP Transport Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.#ctor(System.Int32,LowNet.Server.LowNetServer)">
            <summary>
            Create new TCP Layer
            </summary>
            <param name="port"></param>
            <param name="server"></param>
        </member>
        <member name="F:LowNet.Transport.TCPLayer.Listener">
            <summary>
            This Listener
            </summary>
        </member>
        <member name="P:LowNet.Transport.TCPLayer.Mainserver">
            <summary>
            Mainserver Instance for Logging
            </summary>
        </member>
        <member name="P:LowNet.Transport.TCPLayer.IsRunning">
            <summary>
            Is TCP Layer Running
            </summary>
        </member>
        <member name="P:LowNet.Transport.TCPLayer.Port">
            <summary>
            Get Serverport
            </summary>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.Send(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send data only to Client
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.SendAll(LowNet.Data.Store)">
            <summary>
            Send data to All Clients
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.SendAll(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send data to all Clients only not this Client
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.Send(System.Int32,LowNet.Data.Store)">
            <summary>
            Send data only to Client
            </summary>
            <param name="clientId"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.SendAll(System.Int32,LowNet.Data.Store)">
            <summary>
            Send data to all Clients only not this Client
            </summary>
            <param name="clientId"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.Shutdown">
            <summary>
            Stop TCP Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.Start">
            <summary>
            Start TCP Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.TCPLayer.ConnectCallBack(System.IAsyncResult)">
            <summary>
            Tcp Callback
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:LowNet.Transport.UDPLayer">
            <summary>
            UDP Transport Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.#ctor(System.Int32,LowNet.Server.LowNetServer)">
            <summary>
            Create new UDP Layer
            </summary>
            <param name="port"></param>
            <param name="server"></param>
        </member>
        <member name="F:LowNet.Transport.UDPLayer.Listener">
            <summary>
            This Listener
            </summary>
        </member>
        <member name="P:LowNet.Transport.UDPLayer.Mainserver">
            <summary>
            Mainserver Instance for Logging
            </summary>
        </member>
        <member name="P:LowNet.Transport.UDPLayer.IsRunning">
            <summary>
            Is UDP Layer Running
            </summary>
        </member>
        <member name="P:LowNet.Transport.UDPLayer.Port">
            <summary>
            Get Serverport
            </summary>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.SendUDP(System.Net.IPEndPoint,LowNet.Data.Store)">
            <summary>
            Send UDP Data to Player
            </summary>
            <param name="endPoint"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.Shutdown">
            <summary>
            Stop UDP Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.Start">
            <summary>
            Start UDP Layer
            </summary>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.ReceiveCallback(System.IAsyncResult)">
            <summary>
            UDP Callback
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.SendUDP(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send UDP Data to Player
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.SendAll(LowNet.Data.Store)">
            <summary>
            Send UDP to All Clients
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.SendAll(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send UDP to All Clients ecxept this Client
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.Send(System.Int32,LowNet.Data.Store)">
            <summary>
            Send UDP data to This Client 
            </summary>
            <param name="ClientId"></param>
            <param name="store"></param>
        </member>
        <member name="M:LowNet.Transport.UDPLayer.SendAll(System.Int32,LowNet.Data.Store)">
            <summary>
            Send UDP Data to all only not on this ClientId
            </summary>
            <param name="client"></param>
            <param name="store"></param>
        </member>
        <member name="T:LowNet.Unity3D.ClientNetworkmanager">
            <summary>
            Unity3d Client Network Managercomponent
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Networkmanager">
            <summary>
            Client Instance
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.IPAdresse">
            <summary>
            Server IP to Connect
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Serverport">
            <summary>
            Server Port
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Serverpassword">
            <summary>
            Server Password if not empty when Need to Connect
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Timeout">
            <summary>
            Add Client Timeout
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.ConnectionId">
            <summary>
            Client ConnectionId
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Autoconnect">
            <summary>
            Autoconnect to Server on Start
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.IsConnected">
            <summary>
            Only Readable if Player Connected to Server
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Connect">
            <summary>
            Editor Quick Connector
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ClientNetworkmanager.Logging">
            <summary>
            Define Client logging Mode
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ClientNetworkmanager.SetConnection(System.String,System.Int32,System.String)">
            <summary>
            Set Server Connection to Client
            </summary>
            <param name="ServerIP"></param>
            <param name="ServerPort"></param>
            <param name="ServerPassword"></param>
        </member>
        <member name="M:LowNet.Unity3D.ClientNetworkmanager.ConnectServer">
            <summary>
            Connect the Client to Server
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ClientNetworkmanager.Disconnect">
            <summary>
            Disconnect Gameclient from Server
            </summary>
        </member>
        <member name="T:LowNet.Unity3D.ServerNetworkmanager">
            <summary>
            Unity3d Server Networkmanager Component
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.server">
            <summary>
            Server Instance
            </summary>
        </member>
        <member name="P:LowNet.Unity3D.ServerNetworkmanager.NetworkManager">
            <summary>
            Network Manager Instance
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.Serverport">
            <summary>
            Server Listenport
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.Servername">
            <summary>
            Server Name
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.Serverpasword">
            <summary>
            Server Password
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.MaxPlayer">
            <summary>
            Server Max Player Amount
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.Autostart">
            <summary>
            Autostart on Start from this Component
            </summary>
        </member>
        <member name="F:LowNet.Unity3D.ServerNetworkmanager.Logging">
            <summary>
            Logmode Settings
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendUDP">
            <summary>
            Send UDP Data
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendUDPAll">
            <summary>
            Send UDP Data to All
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendTCP(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send data only to Client
            </summary>
            <param name="client">Client</param>
            <param name="store">Packet Store</param>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendTCPAll(LowNet.Data.Store)">
            <summary>
            Send data to All Clients
            </summary>
            <param name="store">Packet Store</param>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendTCPAll(LowNet.Server.Data.Client,LowNet.Data.Store)">
            <summary>
            Send data to all Clients only not this Client
            </summary>
            <param name="client">Client</param>
            <param name="store">Packet Store</param>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendTCP(System.Int32,LowNet.Data.Store)">
            <summary>
            Send data only to Client
            </summary>
            <param name="Client">ClientId</param>
            <param name="store">Packet Store</param>
        </member>
        <member name="M:LowNet.Unity3D.ServerNetworkmanager.SendTCPAll(System.Int32,LowNet.Data.Store)">
            <summary>
            Send data to all Clients only not this Client
            </summary>
            <param name="Client">ClientId</param>
            <param name="store">Packet Store</param>
        </member>
        <member name="T:LowNet.Unity3D.ThreadManager">
            <summary>
            Unity3d Network Threadmanager Component, Needet for Packet Reading/Writing
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ThreadManager.ExecuteOnMainThread(System.Action)">
            <summary>
            Execute
            </summary>
            <param name="_action"></param>
        </member>
        <member name="M:LowNet.Unity3D.ThreadManager.UpdateMain">
            <summary>
            Update Actions
            </summary>
        </member>
        <member name="M:LowNet.Unity3D.ThreadManager.Update">
            <summary>
            Update 
            </summary>
        </member>
        <member name="T:LowNet.Utils.ClassUtils">
            <summary>
            Lownet Class Utils
            </summary>
        </member>
        <member name="F:LowNet.Utils.ClassUtils.CRC_DATA_SET">
            <summary>
            Checksum Datalist
            </summary>
        </member>
        <member name="M:LowNet.Utils.ClassUtils.TryGetClass(System.Object)">
            <summary>
            Get Classname and more Infos, For Ligging
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Utils.ClassUtils.CalculateChecksum(System.String)">
            <summary>
            Get Checksum 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LowNet.Utils.ClassUtils.CalculateShortChecksum(System.String)">
            <summary>
            Get Checksum 
            </summary>
            <param name="str"></param>
            <returns></returns>
            
        </member>
    </members>
</doc>
